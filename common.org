#+TITLE: 通用知识点
#+AUTHOR: renpeng
#+OPTIONS: toc 2
#+OPTIONS: toc:nil

* 编码
** unicode和UTF-8
    unicode是一个编码规范，它纳入了世界上所有的字符，赋予每个字符一个唯一编码。如一个汉字在unicode里对应一个2字节编码，这个编码在支持unicode的系统里都能被正确识别。
    单从编码规范的角度来看，unicode跟计算机（可以）没有任何关系。
    unicode定义了字符的编码（码值），但是并未定义计算机中该如何存储、传送内容，所以，出现了UTF(unicode transformation format)，有UTF-8和UTF-16。UTF-16即任何字符都用两个字节存放，这对英文为主的环境显然太浪费，但是对中文为主的环境比较适合。UTF-8是变长编码（1到3字节），解决了浪费问题，缺点是编码规则复杂一些。

*** utf-8的表示形式
    utf8根据当前字节的第一个bit来确定使用几个字节来表示（存储）一个unicode，这是约定的规则.你用UTF-8来表示时必须遵守这样的规则.我们知道UTF-16不需要用啥字符来做标志,所以两字节也就是2的16次能表示65536个字符.而UTF-8由于里面有额外的标志信息,所有一个字节只能表示2的7次方128个字符,两个字节只能表示2的11次方2048个字符.而三个字节能表示2的16次方,65536个字符.由于"汉"的编码27721大于2048了所有两个字节还不够,只能用三个字节来表示.

    0xxxxxxx,如果是这样的01串,也就是以0开头后面是啥就不用管了XX代表任意bit.就表示把一个字节做为一个单元.就跟ASCII完全一样.
    110xxxxx 10xxxxxx.如果是这样的格式,则把两个字节当一个单元
    1110xxxx 10xxxxxx 10xxxxxx 如果是这种格式则是三个字节当一个单元.

    所有要用1110xxxx 10xxxxxx 10xxxxxx这种格式.把27721对应的二进制从左到右填充XXX符号，于是就出现了Big-Endian,Little-Endian的术语.Big-Endian就是从左到右,Little-Endian是从右到左.
    由上面我们可以看出UTF-8需要判断每个字节中的开头标志信息,所以如果一当某个字节在传送过程中出错了,就会导致后面的字节也会解析出错.而UTF-16不会判断开头标志,即使错也只会错一个字符,所以容错能力强.

*** 如何区分文件是哪种编码
    前面说了要知道具体是哪种编码方式,需要判断文本开头的标志,下面是所有编码对应的开头标志

    EF BB BF　　　 UTF-8
    FE FF　　　　　UTF-16/UCS-2, little endian
    FF FE　　　　　UTF-16/UCS-2, big endian
    FF FE 00 00　　UTF-32/UCS-4, little endian.
    00 00 FE FF　　UTF-32/UCS-4, big-endian.

    其中的UCS就是前面说的ISO制定的标准,和Unicode是完全一样的,只不过名字不一样.ucs-2对应utf-16,ucs-4对应UTF-32.UTF-8是没有对应的UCS
* tcp/ip
*** 分层
| 网络分层 | 示例                   |
|----------+------------------------|
| 应用层   | telnet,ftp,email       |
| 传输层   | tcp,udp                |
| 网络层   | ip,icmp,IGMP           |
| 链路层   | 设备驱动程序以及接口卡 |
|----------+------------------------|

*** 数据传输
tcp传给ip 的数据称为tcp报文段，简称tcp端,tcp segments
ip 传给网络层的数据单元称为ip数据报，IP datagram
通过以太网传输的比特流称作帧，frame，46-1500字节之间



*** tcp -- 为解决数据报可靠传输
1. ARQ和重传
接收方为每个分组发送ACK（acknowlegement）
2. 分组窗口和滑动窗口
充分利用链路资源，同时处理多数据报
3. 变量窗口：流量控制和拥塞控制
+ 基于速率（rete-base），给发送方指定一个某个速率
+ 基于窗口（window-base），根据ack分组携带的信息，动态地更新分组窗口大小
+ 拥塞控制，特殊的流量控制形式。因网络中路由设备能力限制，需要降低传输分组速度
4. 设置重传超时
通过往返时间估计（round trip time estimation），计算RTT样本均值


*** iptables
可以在如下5个位置做网络过滤器（netfilter）
1. 内核空间中：从一个网络接口来，到另一个网络接口去
2. 数据包从内核流向用户空间
3. 数据包从用户空间流出
4. 进入/离开本机外网接口
5. 进入/离开本机内网接口

对应5个钩子函数（hook function），也叫五个规则链。任何数据包只要经过本机，一定经过5个链中的一个
1. PREROUTING --路由前
2. INPUT --数据包流入口
3. FORWARD -- 转发
4. OUTPUT -- 数据包出口
5. POSTROUTING --路由后

防火墙策略，ACCEPT/DROP


*** 链路层
链路层的PDU称为帧


*** 安全通信
采用对称+非对称加密方式，可以在兼顾安全与效率，这也是https协议的设计思路

TODO https交换证书序列图

* 分布式
分布式系统是一个硬件或软件组件分布在不同网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统

** 分布式系统的特点
1. 分布性
2. 对等性
3. 并发性
4. 缺乏全局时钟

** 分布式系统的问题
1. 通信异常
2. 网络分区--脑裂
3. 三态
   成功、失败和超时
4. 节点故障

** acid
1. atomicity
2. consistency
3. isolation
4. durability

** 事务隔离级别 (隔离性isolation继续细分)
1. read uncommitted
2. read committed
3. repeatable read
4. serializable

** cap猜想
1. consistency（一致性）
2. availability（可用性）
3. partition tolerance（分区容错性）

    一个分布式系统不可能同时满足以上三个特性要求；

** base理论
1. basically available (基本可用)
2. soft state (软状态)
3. eventually consistency (最终一致性)

** 最终一致性的5个变种
1. causal consistency (因果一致性)
2. read your write (读己之所写)
3. session consistency (会话一致性)
4. monotonic read consistency (单调读一致性)
5. monotonic write consistency (单调写一致性)


** 一致性协议
   主要有2pc，3pc和paxos算法

   2pc和3pc，在分布式系统中，虽然每个能够明确知道自己进行事务操作的成功或失败，但却无法知道其他分布式节点的操作结果。因此，当一个事务操作涉及跨分布式节点时，为了保持事务处理的acid特性，就需要引入一个成为“协调者（Coordinator）”的组件来统一调度所有分布式节点的执行逻辑。而被调度的分布式节点则成为“参与者（Participant）”

** 2PC
*** 阶段一：提交事务请求
    1. 事务询问
       协调者向所有参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的相应；
    2. 执行事务
       各参与者节点执行事务操作，并将undo和redo信息记入事务日志；
    3. 各参与者向协调者反馈事务询问的相应
       如果参与者成功执行了事务操作，那么反馈给协调者yes，否则no


    此阶段又称为”投票阶段”

*** 阶段二：执行事务提交
    协调者根据参与者反馈的情况决定最终是否可以进行事务提交操作，正常情况下，存在两种可能；
**** 执行事务提交
     假设协调者从所有参与者获得的反馈都是yes，那么就会执行事务提交
     1. 发送提交请求
        协调者向所有参与者发送commit请求；
     2. 事务提交
        参与者接收到commit请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的资源
     3. 反馈事务提交结果
        参与者在完成事务提交后，向协调者发送ack消息
     4. 完成事务
        协调者收到所有参与者反馈的ack消息后，完成事务
** 3pc和paxos算法
1. 3pc
   canCommit，preCommit和doCommit
   特点：解决了阻塞范围，并未解决一致性
2. paxos
   Proposer：分两阶段提交提案，prepare和accept。prepare阶段会受到pomise，如果收到大于半数的pomise，则向pomise发送accept请求；accept阶段会受到accepted，如果超过半数accepted，则成功；
   Acceptor：在prepare阶段，如果没有accepted一个值，则会不停认同提案号最大的那个提案，返回ok，在accept阶段，如果编号相同则返回accepted，小于当前编号则rejected，大于编号则保存新编号，如果已accepted一个提案，则会返回（acceptedProposal，acceptedValue）


* p2p网络
中心化拓扑：优点是维护简单，资源发现效率高。需要一个地址索引服务器，通过此服务寻址
全分布式非结构化拓扑：具有较好的容错性和可用性。但是随着网络规模的扩大，会造成流量急剧增加，影响部分节点运行，影响整体效率
全分布式结构化拓扑：主要采用分布散列表DHT来组织网络节点
半分布式拓扑：也称混杂模式，英文名Hybrid Structure，吸取了中心化结构和全分布式非结构化拓扑的优点，选择性能较高（处理、存储、带宽等方面性能）的结点作为超级结点（英文表达为SuperNodes或者Hubs），在各个超级结点上存储了系统中其他部分结点的信息，发现算法仅在超级结点之间转发
* 容灾
** 数据容灾
1. mysql容灾。mysql的半同步和异步复制功能，构建主备，跨城的容灾架构
2. 数据分片。

** 应用系统容灾
1. 分布式，自动服务发现
2. set化

** 流量入口容灾
1. 切量与公告
