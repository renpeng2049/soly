#+TITLE: python,c/c++,lisp
#+AUTHOR: renpeng

* python
** 类与继承
   1. Type函数可以动态生成类型（class），实质上pyton创建类的过程也是调用type()函数
   2. type()函数可以动态创建类，metaclass可以动态控制类（增加方法、属性和过程），类似java动态生成类（动态字节码）
   3. 装饰器在python中类似动态代理，装饰一个函数的调用，但是不影响函数执行。
   4. 枚举类需继承Enum，直接通过ClassName.enumName获取枚举

** 生成器generator
   与列表生成式的样子很像，只不过generator使用小括号包裹，而列表生成式用中括号，
   如:g = (x * x for x in range(10))

   generator只定义了计算规则，一边循环一遍计算。反复调用next()方法获取下一个返回值。一般永远不会使用next方法，因为generator用for循环来迭代它。
   如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator。yield关键字在generator中负责中断，下次调用next()在此中断的地方开始。

* c/c++
*** inline--内联函数
编译器直接用函数定义替换掉函数调用点。
inline建议直接在h文件中定义
inline函数只能包含小而精的代码逻辑，不能包含while、switch等复杂逻辑，并且不能是递归函数。
类成员函数默认是inline
*** 编译器生成的成员函数
1. 默认构造函数
2. 默认析构函数
3. 复制构造函数
4. 复制运算符
5.
*** 名词
静态/动态联编
内联函数，不能递归
引用变量&

*** 后续详细了解
函数重载
模板函数
名称修饰
名称空间
10.6类作用域
10.7抽象数据类型
运算符重载-矢量运算例子
12.7队列模拟
14.3多重继承
异常与RTTI
* golang
1. 三项环境变量
2.

* rust语言
rust语言在语法上有一个新东西：RAII--就是通过所有权、借用、生命期机制来做到精确的内存控制。

* 协程
