#+TITLE: 设计方案
#+AUTHOR: renpeng

* 库存系统设计方案
高并发下库存超卖问题
直接的处理方式是采用db事务。
在高并发大量请求的场景下，不能让所有请求都进入，需在前端拦截掉大部分流量。前端可操作方案为：扩容，静态化，限流，有损服务

后端方案，主要讨论写的问题，读的问题通过增加cache可以很容易的解决
1. 首先MySQL自身对于高并发的处理性能就会出现问题，一般来说，MySQL的处理性能会随着并发thread上升而上升，但是到了一定的并发度之后会出现明显的拐点，之后一路下降，最终甚至会比单thread的性能还要差
2. 其次，超卖的根结在于减库存操作是一个事务操作，需要先select，然后insert，最后update -1。最后这个-1操作是不能出现负数的，但是当多用户在有库存的情况下并发操作，出现负数这是无法避免的
3. 最后，当减库存和高并发碰到一起的时候，由于操作的库存数目在同一行，就会出现争抢InnoDB行锁的问题，导致出现互相等待甚至死锁，从而大大降低MySQL的处理性能，最终导致前端页面出现超时异常。


淘宝的高大上方案
1. 关闭死锁检测，提高并发处理性能
2. 修改源代码，将排队提到进入引擎层前，降低引擎层面的并发度
3. 组提交，降低server和引擎的交互次数，降低IO消耗

可选方案1
将存库从MySQL前移到Redis中，所有的写操作放到内存中，由于Redis中不存在锁故不会出现互相等待，并且由于Redis的写性能和读性能都远高于MySQL，这就解决了高并发下的性能问题。然后通过队列等异步手段，将变化的数据异步写入到DB中。
优点：解决性能问题

缺点：没有解决超卖问题，同时由于异步写入DB，存在某一时刻DB和Redis中数据不一致的风险

可选方案2
引入队列，然后将所有写DB操作在单队列中排队，完全串行处理。当达到库存阀值的时候就不在消费队列，并关闭购买功能。这就解决了超卖问题。

优点：解决超卖问题，略微提升性能。

缺点：性能受限于队列处理机处理性能和DB的写入性能中最短的那个，另外多商品同时抢购的时候需要准备多条队列

可选方案3
　　将提交操作变成两段式，先申请后确认。然后利用Redis的原子自增操作（相比较MySQL的自增来说没有空洞），同时利用Redis的事务特性来发号，保证拿到小于等于库存阀值的号的人都可以成功提交订单。然后数据异步更新到DB中。

　　优点：解决超卖问题，库存读写都在内存中，故同时解决性能问题。

　　缺点：由于异步写入DB，可能存在数据不一致。另可能存在少买，也就是如果拿到号的人不真正下订单，可能库存减为0，但是订单数并没有达到库存阀值。

* db 容灾方案 TODO
在传统的解决方案中，通常会采用“两地三中心”来解决城市级故障的容灾问题，采用读写分离的方案来解决读操作的性能问题。顾名思义，“两地三中心”通常指的是在两个城市的三个机房内各部署一套独立的数据库系统，同城两机房间数据进行同步复制，数据强一致；异地机房间采用异步复制的方式，数据有一定的延迟。主库提供数据库读写服务，备库可根据业务需要提供读服务。主流商业数据库通常有成熟的同步工具，对同步过程中的异常也有较完善的处理，“两地三中心”是一个普遍采用的方案。
